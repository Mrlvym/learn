uboot如何启动内核

1,uboot和linux内核到底是什么？
	（1）uboot本质就是一个复杂点的裸机程序。和我们之前学习的裸机开发中的裸机程序没有什么本质的区别，就是更加复杂了。
	（2）linux操作系统本身也是一个裸机程序。和uboot、其他裸机程序并没有本质区别。区别就在于操作系统运行起来之后在软件上
		 分为内核层和应用层，分层后两层的权限不同，内存访问和设备操作更加精细。（内核可以随便访问各种硬件，而应用程序
		 只能被限制的访问硬件和内存地址）

2，部署在SD卡中特定分区内
	（1）一个完整的软件+硬件嵌入式系统，静止时（未上电）uboot、kernel、rootfs等必须的软件都以镜像的形式存储在启动介质中
		 （有SD卡/iNand/Nand/eMMC），运行时都是在DDR中进行运行的，与存储介质无关。上面两个状态都是稳定状态，第三个状态是
		 动态过程，即从静止态到运行态的过程，也就是启动过程。
	（2）动态启动过程是一个从SD卡逐步搬移到DDR内存，并且运行启动代码进行相关硬件初始化和软件架构的建立，最终达到稳定运行
		 状态的一个过程。
	（3）静止时uboot.bin、zImage、rootfs都在SD卡中，他们不可能随意存放在SD卡的任意位置，因此需要对SD卡进行一个分区，然后
		 各个不通过的镜像文件存放在各自的分区中，这样在启动过程中uboot、kernel就知道到哪里去找到这些镜像文件。（uboot、
		 kernel中的分区表必须一致，同时和SD卡的实际使用分区要一致）
		 
3，运行时必须先加载到DDR中链接地址处
	（1）uboot在第一阶段中进行重定位时将第二段（整个uboot镜像）加载到DDR的链接地址处，是我们指定的链接地址。
	（2）内核也有类似要求，uboot启动内核时将内存从SD卡读取放在DDR中（其实就是个重定位的过程），不能够随意放置，必须放在
		 内核的链接地址处，否则内核启动不起来。
		 
4，内核启动需要必要的启动参数
	（1）uboot是无条件启动的，从零开始启动的。
	（2）内核是不能开机自动从零开始启动的，内核启动需要uboot帮忙。uboot哟啊帮助内核实现重定位（从SD卡到DDR），uboot还要
		 给内核提供启动参数。
		 
5，启动内核第一步：加载内核到DDR中
	uboot要想启动内核，分为两个步骤：
		第一是将内核镜像从启动介质中加载到DDR中。
		第二步是去DDR中启动内核镜像。（内核代码根本就没有考虑重定位，因为内核知道会有uboot之类的把自己加载到DDR中的链接
		地址处，所以内核直接就是从链接地址开始运行的）

6，静态内核镜像在哪里？
	（1）SD卡/iNand/Nand/NorFlash/eMMC等：raw分区
		1）常规启动时，各种镜像都在我们的启动介质中，因此uboot只需要从启动介质的kernel分区中去读取内核镜像到DDR的内核连接
		   地址处，内核会自动从这个位置来进行启动运行。读取需要uboot的命令（例如：movi命令）。
		2）这种方式来加载DDR，使用movi read kernel 0x30008000（链接地址）。其中kernel指的是uboot中的kernel分区。
	（2）tftp、nfs等网络下载方式从远端服务器回去镜像。
		uboot还支持远程启动的方式，内核镜像不放在启动介质中，而是放在主机的服务器中，然后需要启动时uboot通过网络从服务器中
		下载镜像到开发板的DDR中的链接地址处，让后在经过启动命令启动内核。
		
	分析总结：最终结果是要将内核镜像放到DDR中的内核连接地址处，而用什么方式来完成这一步骤我们是不关心的。

7，镜像要放在DDR的什么地址？
	（1）内核镜像一定要放在内核的链接地址处，连接地址是多少需要去内核的链接脚本或者内核的主Makefile中去查看。
	
8，zImage和uImage的区别联系
	（1）bootm命令对应do_bootm函数
		1）命令前加do即可构成这个命令对应的函数，因此我们bootm命令执行时，uboot实际执行的是do_bootm函数
		（在cmd_bootm.c文件中）
		2）do_bootm函数用CONFIG_ZIMAGE_BOOT宏来条件编译,这段代码是用来支持zImage格式的内核启动的。
	（2）vmlinuxz和zImage和uImage
		1）uboot经过编译直接生成elf格式的可执行文件u-boot，可以在本机linux操作系统下直接执行的。但是这种格式不能用来烧录
		   下载到开发板来使用，我们烧录下载到开发板的是u-boot.bin文件。u-boot.bin文件是由u-boot文件经过arm-linux-objcopy
		   工具生成的。
		2）linux内核经过编译之后会生成一个elf格式的可执行程序，叫做vmlinux或者vmlinuz，这个是原始的未经过任何处理和加工的
		   原版内核elf文件；嵌入式系统部署时烧录的一般不会值vmlinux/vmlinuz（75MB大概），而是要用arm-linux-objcop工具去
		   制作烧录镜像格式（就是uboot.bin格式的，但是内核没有.bin后缀），经过制作加工后生成的烧录镜像文件叫做Image（
		   7.5MB大概），从大小来看，制作成镜像来烧录主要是为了缩减大小，节省磁盘。
		3）原则上Image就可以直接被烧录到Flash上进行启动执行（类似于uboot.bin），但是实际上并没有那么简单。实际上linux的作者
		   们还是觉得Image太大了，所以对Image进行了压缩处理，并且在Image镜像压缩后的文件前附加上了一部分解压缩代码。构成了
		   一个压缩格式的镜像文件叫做zImage。（因为当年Image的大小刚好比一张软盘的大小大（软盘有1.2MB和1.4MB两种）），为了
		   节省一张软盘的钱，所以就产生了zImage。
		4）uboot为了启动linux内核，还发明了一种内核镜像格式交uImage。uImage由zImage加工得到的，uboot中有一个工具mkinage，
		   可以将zImage加工生成uImage。注意：uImage不关内核的事，linux内核只管生成zImage即可，然后uboot中的mkimage再经过
		   zImage生成了uImage来供uboot启动。这个加工过程实际上就是在zImage的前面加了64个字节的uImage头信息。信息内容可在
		   mkimage程序中看到。	
	（3）编译内核得到uImage去启动
		如果直接在kernel地下去make uImage会提示mkimage command not found。解决方案就是将uboot/tool目录下的mkimage拷贝到
		/usr/local/bin/目录下，复制mkimage工具到系统目录下。再去执行make uImage就可以的到uImage镜像了。
		
9，zImage启动细节
	1）do_bootm函数中直到after_header_check符号处，都是再进行镜像的头部校验，当校验为哪种格式的镜像，就会以哪种格式镜像的
	   启动方式来启动内核镜像。如果检验头不正确，则无法正常启动内核镜像。
	（1）LINUX_ZIMAGE_MAGIC
		1）这是一个定义的魔数，这个数等于0x16cf2818，表示这个镜像是一个uImage。也就是说zImage格式的镜像中在头部的一个固定
		   位置存放了这个数作为格式标记。入股我们拿到一个Image，去他的那个位置去取出4个字节判断它是否等于LINUX_ZIMAGE_MAGIC
		   ，则可以知道这个镜像是否是zImage
		2）命令bootm 0x30008000，所以do_bootm的argc = 2，argv[0] = bootm，argv[1] = 0x30008000。但是实际bootm命令还可以不带
		   参数执行，直接bootm，则会从CFG_LOAD_ADDR（在X210_sd.h）地址去执行。
		3）zImage头部开始的第37 - 40字节处存放着zImage标志魔数，从这个位置取出4字节和LINUX_ZIMAGE_MAGIC对比。
	（2）image_header
		1）这个结构体是我们uboot启动内核使用的一个标准启动数据结构，zImage头信息也是一个image_hearder_t，但是在实际启动
		   之前需要进行一些改造。
		   hdr->ih_os =  IH_OS_LINUX;
		   hdr->ih_ep =  ntohl(addr);
		   这两句就是在进行改造。
		2）images全局变量是do_bootm函数中使用，用来完成启动过程的。zImage的校验过程其实就是确认是不是zImage，确认后再修改
		   zImage头信息到合适，修改后用头信息去初始化这个全局变量，然后就完成了校验。
		   
10，uImage启动过程
	（1）uImage启动
		1）LEGACY（遗留的），在do_bootm函数中，这种方式指的就是uImage的方式。
		2）uImage方式是uboot本省发明的支持linux启动的镜像格式，但是后来这种方式被一种更新的方式替代了，这种新的方式就是
		   设备树方式。（在do_bootm防止中叫FIT）
		2）uImage的启动校验在boot_get_kernel函数中，主要工作是检验uImage的头信息，并且得到真正的kernel的起始位置去启动
		   内核。
	（2）设备树方式内核启动
		这个自己后续找资料学习
		
	总结：uboot本省只支持uImage方式启动，后来有了设备树（FIT）方式启动，就将uImage方式命名为（LEGACY），后来移植的人为了
		  方便，又加入了zImage的启动方式，这几种方式用条件编译的方式进行选择哪种启动方式。
		  
总结：到这里第二阶段校验头信息结束了，下面进入第三阶段，第三阶段的主要任务是启动linux内核，调用do_bootm_linux函数来完成。

11，do_bootm_linux函数
	（1）找到do_bootm_linux函数
		用SI4搜索找到do_bootm_linux函数的定义处，在uboot/lib_arm/bootm.c
	（2）镜像的entrypoint（入口）
		1）ep就是entrypoint的缩写，就是程序的入口。一个镜像文件的起始执行部分不是镜像的开头（镜像的开头有n个字节的头信息）
		   ，真正的镜像文件执行时的第一句代码是在镜像的中部某个字节处，相当于头是有一定的偏移量的。这个偏移量记录在头信息
		   中。
		2）一般执行一个镜像有以下四个步骤：
			第一步：先读取头信息，然后在头信息的特定地址找到MAGIC_NUM，由此来确定镜像的类型（zImage、uImage等）。
			第二步：对镜像进行校验（CRC检验之类的）
			第三步：再次读取头信息，由特定的地址知道这个镜像的相关信息（镜像长度、镜像种类、入口地址等）。
			第四步：就去entrypoint出执行这个镜像文件。
		3）theKernel = (void (*)(int, int, uint))images->ep;将ep赋值给theKernel，则这个函数指向的就是内存中加载的linux
		   内核镜像的真正入口地址（就是操作系统要执行的第一行代码）。
	（3）机器码的再次确认
		uboot在启动的时候要将机器码通过传参的方式传递给linux内核。可以通过环境变量machid的方式填充机器码，也可以通过
		gd->bd->bi_arch_num硬编码的方式将机器码写死。
	（4）传参并启动概述
		Starting kernel..........这个及时uboot打印出来的最后一句话，从这句话打印出来之后，uboot的工作就已经完成了。也成功
		的加载了内核镜像，各种校验也通过了，也找到了镜像的入口地址，也向内核传递了参数，也试图去执行内核。如果内核还没有
		启动的话，%80的可能都是因为传参的问题，还有可能是别的地方粗心导致的。
		
12，传参详解
	（1）tag结构体方式传参
		1）struct tag，tag是一个结构体，在uboot和kernel中都定义了tag这个结构体，而且定义是一样的。
		2）tag_header和tag_xxx。tag_header中有这个tag的大小和类型编码，kernel拿到这个tag之后先分析这个tag_header
		   得到tag的编码类型和大小。然后吧剩余的部分当做tag_xxx（可能是tag_core	、tag_mem32等）来处理。
		3）tag_start（setup_start_tag (bd)）和tag_end（setup_end_tag (bd)）。kernel接收到的传参是若干个tag构成的
		（链表形式），这些tag由tag_start起始，到tag_end结束。
		4）tag传参方式是由linux kernel发明的，kernel定义了这种向我传参的方式，uboot只是实现了这种传参方式，来向kernel传参。
		5）tag_start类型是ATAG_CORE、tag_end类型是ATAG_NONE,其他的ATAG_xxx都是有效信息tag。
		6）tag结构体
			struct tag {
				struct tag_header hdr;
				union {
					struct tag_core		core;
					struct tag_mem32	mem;
					struct tag_videotext	videotext;
					struct tag_ramdisk	ramdisk;
					struct tag_initrd	initrd;
					struct tag_serialnr	serialnr;
					struct tag_revision	revision;
					struct tag_videolfb	videolfb;
					struct tag_cmdline	cmdline;

					/*
					 * Acorn specific
					 */
					struct tag_acorn	acorn;

					/*
					 * DC21285 specific
					 */
					struct tag_memclk	memclk;
				} u;
			};
			
				struct tag_header {
					u32 size;
					u32 tag;
				};
	（2）x210_sd.h中的一些宏定义来决定传递哪些参数。
		1）CONFIG_SETUP_MEMORY_TAGS 
			tag_mem，传参内容是内存配置信息
		2）CONFIG_CMDLINE_TAG
			tag_cmdline，传参内容是启动命令参数，也就是uboot环境变量的bootargs。
		3）CONFIG_INITRD_TAG
			是rmdisk相关的
		4）CONFIG_MTDPARTITION
			传参内容是iNand/SD卡的分区表
		5）uboot最终是调用thekernel这个函数来调用内核的，这个函数有三个参数，这三个参数很重要，这三个参数就是uboot直接
			传递给linux 内核的三个参数，是通过寄存器传递的，分别放在r0，r1，r2,。第一个参数默认为0，第二个参数是机器码，
			第三个参数是tag链表的首地址。

12，uboot和linux kernel移植的时候需要注意
	（1）uboot端只需要在x210_sd.h中配置传递参数的宏，需要传递哪个参数就打开哪个宏
	（2）kernel如果启动不成功，注意传参是否成功。传参不成功首先看uboot环境变量中的bootargs是否设置正确，其次看uboot是否
		开启课bootargs传参的宏定义。
	