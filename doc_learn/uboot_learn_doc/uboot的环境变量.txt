uboot的环境变量

1，uboot环境变量基础
	（1）环境变量的作用
		让我们可以不用修改uboot的源代码，而是通过修改环境变量来影响uboot运行时的一些数据和特性。譬如说通过修改bootdelay
		环境变量就可以更改系统开机自启动时的倒数的秒数。
	（2）环境变量的优先级
		1）uboot代码当中有一个值，环境变量中也有一个值。uboot程序实际运行时规则是：如果环境变量为空则使用代码中的值，如果
		   环境变量的值不为空则优先使用环境变量对应的值。
		2）譬如machid（机器码）。uboot中在x210_sd.h中定义一个机器码2456，写死在程序中不能改变。要想修改只能修改uboot源代码
		   然后再重新烧录才能修改机器码。但是有了machid这个环境变量之后，就可以通过环境变量machid这个环境变量来修改机器码，
		   不需要重新编译uboot的源码。
		3）uboot环境变量的优先级要高于硬编码这些。
	（3）环境变量在uboot中的工作方式
		1）默认环境变量在uboot/common/env_common.c中default_environment数组中（里面通过条件编译来控制哪些环境变量可以使用
		   ），这个东西本质是一个字符数组，大小为CFG_ENV_SIZE（16kb），里面内容就是很多个换件变量连续分布组成的，每个环境
		   变量以'\0'结束。
		2）SD卡中环境变量分区，在uboot的raw分区中。SD卡中其实就是给了个分区，专门用来存储环境变量的。存储时其实是把DDR中的
		   环境变量整体的写入到SD卡分区中。所以当我们saveenv时其实就是把所有的环境变量保存一遍，而且是将所有的环境变量都
		   保存一遍，不是只保存修改的。
		3）DDR中环境变量在c中default_environment中，实质是字符数组。在uboot中其实是一个全局变量，链接时在数据段，重定位时
		   default_environment就被重定位到DDR中一个内存地址处。这个地址处这个全局字符数组就是我们uboot运行时的DDR中的
		   环境变量
		
		总结：刚烧录的系统中环境变量分区是空白的，uboot第一次运行时加载的是uboot代码中自带的一份环境变量，叫做默认环境
		      变量。我们在saveenv时DDR中的环境变量会被更新到SD卡的环境变量分区中，就可以被保存下来，下次开机会在环境
			  变量relocate时会将SD卡中的环境变量加载到DDR中。
			  
			  default_environment中的内容虽然被uboot源代码初始化为一定的值（这个值就是我们的默认环境变量值），但是在uboot
			  启动的第二阶段，env_relocate时代码会判断SD卡中的env分区的crc是否通过。如果crc检验通过说明SD卡中有正确的环境
			  变量存储，则relocate函数会从SD卡中读取环境变量来覆盖default_environment数组，从而每次开机可以保存上一次更改
			  过的一套环境变量的值。
	
2，环境变量相关命令源码解析1
	（1）printenv命令

3，环境变量相关命令源码解析2
	