2.1.5、U-Boot常用的命令

	1，查看环境变量命令：printenv/print
		（1）print命令不用带参数，作用是打印出系统中所有的环境变量。
		（2）环境变量就好像程序的全局变量一样。程序中任何地方都可以根据需要去用或者更改环境变量（一般都是调用），
			 环境变量和全局变量的不同之处在于全局变量的生命周期是在程序的一次运行当中，程序开始运行时诞生，程序
			 结束运行时死亡，下次运行程序时从头开始；但是环境变量被存储在Flash中另一块专门区域（Flash上有一个环境
			 变量分区），一旦我们在程序中保存了该环境变量，下次开机时该环境变量的值将维持上一次更改保存后的值。
	
	2，设置（添加/更改）环境变量命令：setenv/set
		（1）用法：set name value
		
	3，保存环境变量更改命令：saveenv/save
		（1）saveenv/save不带参数，直接执行，作用是将内存中的环境变量的值同步保存
			 到Flash上环境变量分区中去（这种保存是将整个Flash上的环境变量分区整体
			 覆盖）。
	
	4，网络测试指令：ping
		（1）用法：ping  ip地址即可
			注意：在ping的时候要保证ping的双方要在同一个网段下
				  当配置没有问题且硬件良好的情况下仍ping不通，可以将网络防火墙关闭再试
			
	5，TFTP命令（用于下载内核）：
	
		（1）tftp方式下载的时候，Uboot扮演的是客户端，主机必须搭载好了tftp服务器才能够完成下载，将需要下载的内核放到tftp服务器的
			 下载目录中去，然后再通过tftp下载命令进行下载。在使用前请确保所有的网络相关的配置都没有问题。
		
		（2）用法：tftp  addrss（开发板内存地址（必须合法））  filename（要下载的文件的名称）
		
		（3）windows端下载一个tftp软件（去网上找），然后用下面的命令进行文件的传输
		
			从本地上传一个文件到设备的用法：（这种用法的前提是得有一个tftp软件（windows平台上））

			tftp -g -r filename   IP        

			eg:     tftp -g -r   ath.ko 192.168.1.155

			从设备上取出文件到本地的用法： （这种用法的前提是得有一个tftp软件（windows平台上））

			tftp -l -p  filename  IP

			eg:    tftp -l -p ath.ko 192.168.1.155
			
			说明：
				-l FILE Local FILE             本地文件
				-r FILE Remote FILE            远程文件
				-g      Get file               获取文件
				-p      Put file               送出文件
			
			
	6，nfs命令（用来挂载根文件系统的命令）
		在使用的时候也要在主机端搭载nfs服务器，才能通过nfs命令来挂载跟文件系统
	
	7，SD卡/iNand/EMMC操作指令 movi
		自己通过movi --help来进行学习
	8，NandFlash操作指令 nand
		操作方式类似于movi命令，可以通过nand --help来进行类比学习
	9，内存操作指令 mm， mw， md
		（1）DDR中是没有分区的（只有对硬盘才会分区），但是内存在使用时一定要注意不要出现内存越界
		    （特别是uboot，因为uboot是裸机程序）。
		（2）md （memory display）指令，参数：[.b, .w, .l] + address + 个数，用来显示内存里的内容
		（3）mw （memory write）指令，参数：[.b, .w, .l] + address + 个数，用来写内存
		（4）mm （memory modify）指令，参数：[.b, .w, .l] + address ，用来修改内存里的内容（写完之后会自动增加地址，能够实现连续修改）
			
	10，启动内核指令 bootm， go
		（1）bootm指令，启动内核的时候可以通过bootags给内核传参。常用于启动内核。
		（2）go指令，启动内核的时间不给内核传参。一般不用于启动内核，常用于执行裸机程序。
		
2.1.6，U-Boot常见的环境变量（环境变量有两份，一份在flash中，一份在ddr中，且环境变量是以字符串形式进行匹配的）	
		
	1，自动运行倒数时间：bootdelay 
		1）bootdelay 是在uboot启动完成后，进入倒计时的时间，倒计时结束之前按下enter键可进入uboot交互界面，
								   若不做操作倒计时结束后uboot开始启动内核
	
	2，网络设置：ipaddr  serverip  gatewayip  netmask  ethaddr
		1）ipaddr 是开发板的本地IP地址
		2）serverip 是开发板通过tftp命令从主机tftp服务器下载镜像文件的主机的IP地址
		3）gatewayip 是开发板本地的网关地址
		4）netmask 是开发板本地的子网掩码
		5）ethaddr 是开发板本地网卡的MAC地址
	
	3，自动运行命令设置：bootcmd （里面放的是启动内核的一些命令集合）
		1）uboot启动后会自动倒数bootdelay秒，如果不打断会uboot会自动启动内核
		2）uboot开机自动启动时实际就是在内部执行了bootcmd环境变量所对应的命令集。
		3）set bootcmd 'read kernel 30008000; bootm 30008000' 意思是：从flash中将kernel分区读取到DDR从0x30008000开始的地址处，
																	  然后从0x30008000处启动内核。
	4，uboot给kernel传参：bootargs
		1）linux内核启动时可以接收uboot给她传递的启动参数，这些启动参数是uboot和kernel约定好的形式、内容，linux内核在这些启动
		   参数的指导下完成内核的启动过程。这样设计是为了灵活，为了在内核不进行重新编译的情况下能够以不同的方式进行内核的启动。
		2）我们要做的事情就是：在uboot的环境变量中设置好bootargs，然后bootm命令在启动内核时会自动将bootargs中的参数传递给内核。
		3）bootargs 'console=ttySAC2,115200 root=/dev/mmcblk0p2 rw init=/linuxrc rootfstype=ext3'
			console=ttySAC2,115200(控制台使用ttySAC2，波特率115200) 
			root=/dev/mmcblk0p2 rw (根文件系统在SD卡端0设备（iNand）的第2分区) 表示根文件系统是可读可写的
			init=/linuxrc     (linux的进程1（init进程）)
			rootfstype=ext3   (根文件系统的类型是ext3的)
		
	5，新建、更改、删除一个环境变量的方法
		新建：set name value
		更改：set name value
		删除：set name
	
	6，注意：环境变量更爱之后的保存
		修改完成之后一定要用saveenv命令进行保存，保存是所有的环境变量都会重新从ddr中写入到flash中，而不是更改了哪个写入哪个
	
2.1.7，uboot中对Flash和DDR的管理	
	1，uboot阶段flash的分区
		1）所谓分区就是，将flash分为一块一块的空间，每一块存放不同的东西
						|----------------|
						|				 |				 
						|				 |
						|				 |
						|    自由分配    |
						|				 |
						|				 |
						|				 |
						|----------------|
						|				 |
						|     rootfs     |
						|----------------|
						|				 |
						|	  Kernel     |
						|----------------|
						|  uboot环境变量 |
						|----------------|
						|				 |
						|	  U-Boot	 |
						|----------------|
						
					flash（共4G）上的分区情况
					
		2）PC机产品中，因为大家都是在windows操作系统上进行的，windows操作系统会对文件进行管理，因此不需要我们过分关注分区的问题。
		3）在uboot中是没有操作系统的，因此在对flash的管理必须事先使用分区界定（实际上在uboot和kernel中都有一个分区表，分区表就是
		   我们在做系统移植时对我们的flash的整体管理分配方法）。有了界定后，我们在部署系统时按照分区界定方法来部署，uboot和kernel
		   的软件中也按照这种界定来工作就不会出错。
		4）分区方法不是一定的，不是固定的，是可以变动的。但是在一个移植中必须事先设计好定死，一般在设计系统移植时就会定好，订的标
		   准：
		   bboot：uboot必须从uboot的起始地址开会（也许是扇区0，也许是扇区1，也许是其他扇区，取决于soc的启动设计），uboot分区的大小设计
		   （必须保证能够放下uboot，一般设计为512KB或者1M（因为一般uboot不会超过512KB）），
		   环境变量：环境变量的分区一般紧贴着uboot来部署，大小
		   一般为32KB（也可以更大，只要够用就行）。
		   kernel：kernel可以紧贴着环境变量来存放，大小一般为3M或者5M（大一点也无所谓）
		   rootfs：rootfs紧贴着kernel来部署，大小根据你制作的根文件系统大小来定
		   自由空间：一般kernel启动之后将自由空间挂载到根文件系统来使用
		   
		 总结：一般规律如下
			1）各分区彼此相连，前面一个分区的结尾就是下一个分区的开始
			2）整个flash充分利用
			3）uboot必须在分区的开头，其他分区的相对位置是可以改变的
			4）各个分区的大小由移植工程师来定，大小不能太大也不能太小
			5）分区在系统移植前就确定好的，在uboot和kernel中使用同一个分区表，将来在系统部署时和系统的代码中的分区方法也必须一样

2.1.8，uboot阶段DDR的分区
	（1）DDR的分区和flash的分区不同，主要是因为flash是掉电存在的，DDR是掉电丢失，可以说DDR是每次系统运行时才开始部署的（在这次系
		 统运行之前部署好久可以了）。
	（2）内存的分区主要是在linux启动起来之前，linux内核启动后内核的内存管理模块会接管整个内存空间，那时候就不用我们来管了。
	（3）注意内存分区关键是在于内存中的哪一块用来干什么必须明确，不同功能使用了同一块内存空间会导致错误

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	