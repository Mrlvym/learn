Makefile学习笔记

1，Makefile的作用和意义
	（1）工程项目中C文件太多管理不方便，因此用Makefile来做项目管理，方便编译链接过程。
	（2）UBoot和Kernel本质上都是C语言项目，都是由多个文件组成的，因此需要通过Makefile来进行管理。所以
		 分析UBoot和Kernel必须对Makefile有所了解。
2，目标、依赖、命令
	（1）目标就是我们要生成的东西
	（2）依赖是用来生成目标的原材料
	（3）命令就是加工方法，所以make XXX的过程其实就是使用命令将依赖加工成目标的过程
3，通配符%和Makefile自动推导（规则）
	（1）%是Makefile中的统配符，代表一个或者多个字母。也就是说%.o代表所有以.o结尾的文件。
	（2）所谓自动推导就是Makefile的规则，按照规则一步一步进行推导。当Makefile需要某一个目标时，他就会
		 把这个目标去套规则说明，一旦套上了某个规则说明，则Makefile会试图寻找这个规则中的依赖，如果能
		 找到规则中的依赖，就会执行这个规则用依赖生成目标。如果找不到就会报错。
4，Makefile中定义和使用变量
	（1）Makefile中定义和使用变量,和shell中非常相似，相似是说：都没有变量类型，直接定义使用，引用变量
		 时用$var。
5，伪目标（.PHONY）
	（1）伪目标意思是这个目标本身不代表一个文件，执行这个目标不是为了得到某个文件或东西，而是单纯的为
		 了执行这个目标下面的命令（可以说伪目标就代表下面的命令），伪目标一般都没有依赖，不加依赖就代
		 依赖一定存在（意思是无条件执行）。
	（2）伪目标可以直接写，不影响使用，但是有时候为了明确声明这个目标为伪目标，用（.PHONY）
		 来声明一下。
	
6，Makefile的文件名
	（1）Makefile文件名合法的一般有两个：Makefil和makefile
	
7，Makefile中应用其他Makefile（include指令）
	（1）有时候Makefile总体比较复杂，分为好几个Makefile来写，然后再主Makefile中引用分支Makefile，用include
		 指令来引用，引用的效果也是原地展开，和C语言的头文件很相似。

8，Makefile中注释是用#号来注释的

9，命令前面的@用来静默执行
	（1）在Makefile的命令行中前面的@代表静默执行。
	（2）Makefile中默认是先将命令打印出来再执行这条命令，如果你只想执行而不像看见执行的命令就用@来静默执行

10，Makefile中几种变量赋值运算符
	（1）= 最简单的赋值
	（2）:= 一般也是赋值，大部分时间和 = 是一样的效果，用 = 赋值的变量，他解析的时候的值取决于最后一次赋值
		 的值，用 := 赋值的变量，他解析时只会替换之前的值而不是替换为最后的赋值结果。（一般使用都用:=）
	（3）?= 如果我们的变量前面并没有赋值过，如果前面已经赋值过了这这条命令就会被忽略掉
	（4）+= 用来给一个已经赋值的变量接续赋值，意思就是把这次的值加到原来的值得后面，有点类似于strcat。（在shell
	和makefile中可以认为所有变量都是字符串）（+= 续接的内容会和原来的内容用 空格 隔开）
	
	注意：Makefile中并不要求赋值运算符两端必须要用空格隔开，这一点要求比shell的格式要求要松一些。
	
11，Makefile的环境变量
	(1)在makefile中用export导出的就是环境变量。一般情况下要求环境变量用大写，其他普通变量用小写。
	(2)环境变量和普通变量不同，环境变量可以理解为整个工程中Makefile之间共享的全局变量，而普通变量只能在当前
	   Makefile中使用的局部变量。所以要注意定义了一个环境变量，会影响工程中其他的Makefile，注意环境变量不能
	   够和工程中Makefile的任意一个普通变量重名。
	(3)Makefile中可能有一些环境变量是Makefile本身定义的环境变量（例如在make执行时给Makefile传参，如：make
	   CC = arm-linux-gcc，其实就是在当前Makefile中传入一个环境变量CC 值是arm-linux-gcc，我们在make传参时
	   传递的参数优先级最高），就好像是C语言中编译器预定义的宏__LINE__、__FUNCTION__等一样。

12，Makefile中使用通配符
	(1)*		代表若干个任意字符，例如*.c,*.h等，会列出1.c,2.c,test.c,hello.c等很多.c结尾的文件。
	(2)?		代表一个任意字符，例如？.c,?.h等，会列出1.c,2.c,t.c等很多名字为一个字符的.c结尾的文件。
	(3)[]		中括号内的单个或多个字符，例如[12].c,会列出1.c,2.c两个文件。
	(4)%		用法和*一致，但是只用在规则统配的时候。
	
关于

13，Makefile的自动变量
	(1)为什么使用自动变量
		有些情况下文件集合中文件非常多，描述的时候非常麻烦，所以我们Makefile就用一些特殊的符号来代替某种条件
		的文件集合，就形成了自动变量。
	(2)自动变量的含义：（在Makefile中可能要用到的特殊意义的符号）预定义的特殊意义的符号。就类似与C语言里边
						那些预置的宏__LINE__、__FUNCTION__一样。
	(3)常见的自动变量
		$@		规则的目标文件名集合
		$<		规则的依赖文件名（只是第一个依赖文件）
		$^		依赖的文件集合（所有的依赖文件）





