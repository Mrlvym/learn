1，X210官方uboot配置编译实战
	1.1找到官方移植好的uboot（BSP概念）
		（1）uboot源代码是在uboot官网下载的（ftp），这个下载的源代码，可能没有你当前使用的开发板的移植，甚至
			 找不到当前开发板使用的SoC对应的移植版本。
		
		（2）SoC厂商在推出一款SoC之后，厂商的工程师会去uboot官网下载一个uboot，根据自己的SoC进行第一步移植，移
			 植的目标是厂商推出的开发板。（譬如三星的S5PV210芯片厂商出的开发板就叫SMDKV210）。所以三星工程师移植
			 的uboot是根据自己的SMDKV210开发板移植的。
		
		（3）具体地开发板的供应商（譬如X210的生产商深圳市九鼎科技）首先购买三星的SMDKV210开发板，然后进行裁剪
			 （把一些无用的功能进行裁剪，或者降低配置，某些配置可能会被替换），硬件替换和裁剪之后生成的新的开
			 发板和三星官方的开发板就有所不同，因此uboot也不相同。但是因为SoC是相同的，所以相似程度至少在60%
			 以上。所以具体开发板供应商会以SMDKV210中移植的uboot为蓝本来移植得到自己的开发板的一个uboot移植。
			 我们买X210开发板时厂商光盘中带有的uboot源码就是开发板厂商移植好的uboot。
			 
		总结：uboot可以有以下三种获取途径：uboot官方（这种需要大量移植）、SoC官方（需要做部分移植）、具体开发
			  板官方uboot。
	
	1.2在linux源生目录下配置编译
		（1）BSP就是board support package（板级支持包，一般由开发板供应商提供），里面的内容就是这个开发板的所
			 有相关的源代码、文档、教程等。
		
		（2）将BSP的压缩包拷贝到linux源生环境中去解压编译（以免造成错误）
	
	1.3配置
		（1）uboot和linux kernel等复杂的项目，都不能直接编译，都需要先配置之后才能进行编译。
		
		（2）uboot也要先配置，配置方法是：首先cd进入根目录，然后再根目录下执行make x210_sd_config。执行配置命令后
			 如果出现configuring............代表配置成功，否则就没有配置成功。
	
	1.4编译得到uboot.bin
		（1）编译之前一定要检查arm-linux-gcc对不对，检查分两步：1，安装的arm-linux-gcc是否合适。2，检查我们
			 当前目录下Makefile的编译器的设置是否正确（CROSS_COMPILE = 交叉编译工具链的路径）。
		
		（2）在确认完上述两点之后就可以进行编译了，在根目录下直接make进行编译就可以了。（也可以采用多线程编译，
			 make -j4（代表用四线程编译））

2，uboot的源码目录分析1
	2.1九鼎官方uboot和三星原版本uboot对比
		（1）以九鼎官方的uboot为蓝本来学习的，以三星官方的uboot为对照。
		
		（2）不同版本的uboot或者同一个版本不同人移植的uboot，可能目录结构和文件内容都有所不容。将来大家懂得
			 了以后也可以自己根据需要去添加/删除/修改目录结构。
		
		（3）九鼎科技在以三星的uboot为原材料进行移植时，把三星版本中很多不必要的文件夹、文件给删除掉了。这个
			 删除把很多完全用不到的文件清除出去了，这样做的好处是减少了整个工程的文件数量，便于工作。
	2.2各文件介绍
		（1）.gitignore文件， 是git工具的文件，git是版本管理工具，这文件和git有关和uboot本身是无关的。
		
		（2）config.mk、rules.mk文件， 后缀是.mk是Makefile文件，将来在某个Makefile中会调用他。
		
		（3）Changelog文件， 是修改记录文件，该文件记录了这个uboot项目的版本变迁，以及这个版本较上个版本
			 做了哪些修改。（这些文件主要是给维护uboot的人用的）
			 
		（4）COPYING文件， 版权声明，uboot本身是GPL许可证的版权。
		
		（5）CREDITS文件， 鸣谢文件，记录了哪些人给这个uboot做了贡献，不需要关注。
		
		（6）image_split.sh文件（无）， 是一个脚本文件，看说明是用来分割uboot.bin到BL1的，暂时用不到，先不用管。
		
		（7）MAINTAINERS文件， 维护者，就是当前在参加维护uboot源码社区的维护人员。（不需要关注）
		
		（8）MAKEALL.sh文件，是一个脚本文件，应该是帮助编译uboot的文件。
		
		（9）Makefile文件， 这个很重要，是uboot源码的主Makefile，奖来整个uboot被编译时就是用这个Makefile管理编译的
			 ，所以我们在分析uboot的配置编译过程中就要分析这个主Makefile。
			 
		（10）mk —— 快速编译的脚本，其实就是先清理然后配置然后编译而已。
		
		（11）mkconfig —— 这个很重要，是uboot配置阶段的主要配置脚本。uboot的可移植性很大程度就是靠这个配置脚本在维护的。
		
		（12）mkmovi —— 暂时不去管他，一个脚本，和iNand/SD卡启动有关
		
		（13）README —— 所有的软件都有README，一般拿到一个东西要先读README，这个东西其实就是个简单的使用说明书。
		
		（14）rules.mk —— 这个文件是我们uboot的Makefile使用的规则，本身非常重要，但是我们不去分析他，不去看他。
		
		总结：以上需要重点看的有 2 个文件：mkconfig和Makefile。一个负责uboot的配置，一个负责uboot的编译。
		

3，uboot的源码目录分析2
	（1）api ——  硬件无关的功能函数的API。uboot移植时基本不用管，这些函数是uboot本身使用的。
	
	（2）api_examples ——  API相关的测试事例代码。
	
	（3）board——-board是板的意思，板就是开发板。board文件夹下每一个文件都代表一个开发板，这个文件夹下面放的文件就是用来
		 描述这一个开发板的信息的。board目录下有多少个文件夹，就表示当前这个uboot已经被移植到多少个开发板上了（当前的uboot
		 支持多少个开发板）。
		 
		 问题一：思考uboot如何支持多套开发板，如何具有可移植性。
		 问题二：board下有这么多文件夹，究竟如何确定具体使用哪一个文件夹（这就是要先配置再进行编译的原因）
		 问题三：开发板越来越多，board目录下文件夹越来越多不方便管理，于是乎uboot就新增了一个机制，可以在board目录下建立
				 各个芯片厂家的目录，将同一个厂家的不同型号的开发板放到同一个目录下，这样就有利于board下文件的管理。多了
				 这一层目录会影响配置阶段，在uboot的配置阶段需要注意配置时的路径深度一定要正确，不然编译时找不到指定的目录
				 就会编译失败。注意一个细节就是历史原因造成的兼容性麻烦。最开始时board目录下就是开发板名字，后来才改为厂商
				 名称，为了向前兼容同一个厂商原来在外面的开发板目录并没有放到厂商目录下去。这样就造成后来的人不知道原因的
				 就会感觉board文件夹很混乱。
	
		注意：强调一下，uboot配置阶段（其实就是根目录下mkconfig和Makefile中配置有关的部分）主要解决的问题就是在可移植性领域
			  能够帮助我们确定具体的文件夹的路径，然后编译时可以找到应该找到的文件，才能够编译成功。因此board目录下的不同
			  会造成配置时的不同。如果移植的时候没有注意这里肯定会出现错误。
		 
	（4）common————common是普遍的普通的，这个文件夹下放的是一些与具体硬件无关的普遍适用的一些代码。譬如控制台实现、crc校验
		 的。但是更多的主要是两类：一类是cmd开头的，是用来实现uboot的命令系统的；另一类是env开头的，是用来实现环境变量的。
		 
	（5）cpu —— 这个目录是SoC相关的，里面存放的代码都是SoC相关初始化和控制代码（譬如CPU的、中断的、串口等SoC内部外设的，
		 包括起始代码start.S也在这里）。里面很多子文件夹，每一个子文件夹就是一个SoC系列。
		 注意：这个文件夹是严格和我们硬件相关的，因此移植时也要注意，但是因为这个文件夹内都是跟SoC相关的，我们自己的开发板
			   和三星的开发板虽然板子设计不同但是Soc是一样的，因此实际移植的时候这个目录基本不用改动。
		 
	（6）disk —— 磁盘有关的。
	
	（7）doc —— 文档目录，里面存放了很多uboot相关文档，这些文档可以帮助我们理解uboot代码。
	
	（8）drivers————顾名思义，驱动。这里面放的就是从linux源代码中扣出来的原封不动的linux设备驱动，主要是开发板上必须用到的
		 一些驱动，如网卡驱动、Inand/SD卡、NandFlash等的驱动。要知道：uboot中的驱动其实就是linux中的驱动，uboot在一定程度上
		 移植了linux的驱动给自己用。但是linux是操作系统而uboot只是个裸机程序，因此这种移植会有不同，让我说：uboot中的驱动
		 其实是linux中的驱动的一部分。
		 
	（9）examples —— 示例代码。
	
	（10）fs —— filesystem，文件系统。这个也是从linux源代码中移植过来的，用来管理Flash等资源。
	
	（11）include —— 头文件目录。uboot和linux kernel在管理头文件时都采用了同一个思路，
		 就是把所有的头文件全部集中存放在include目录下，而不是头文件跟着自己对应的c文件。
		 所以在uboot中头文件包含时路径结构要在这里去找。

	（12）lib_开头 —— （典型的lib_arm和lib_generic）架构相关的库文件。譬如lib_arm里面就是arm架构使用的一些库文件。
		  lib_generic里是所有架构通用的库文件。这类文件夹中的内容移植时基本不用管。

	（13）libfdt —— 设备树有关的。linux内核在3.4左右的版本的时候更改了启动传参的机制，改用设备树来进行启动传参，
		  进行硬件信息的描述了。

	（14）nand_spl —— nand相关的。

	（15）net —— 网络相关的代码，譬如uboot中的tftp nfs ping命令 都是在这里实现的。

	（16）onenand开头 —— 是onenand相关的代码，是三星加的，标准uboot中应该是没有的。

	（17）post —— ???

	（18）sd_fusing —— 这里面代码实现了烧录uboot镜像到SD卡的代码。

	（19）tools —— 里面是一些工具类的代码。譬如mkimage。

	总结：在分析的过程中会涉及到的文件夹有：board、common、cpu、drivers、include、lib_arm、lib_generic、sd_fusing。
	
	
	接下来分析主Makefile的笔记在Makefile_分析文件中
	
		
	